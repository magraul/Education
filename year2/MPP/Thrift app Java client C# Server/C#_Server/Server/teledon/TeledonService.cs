/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace teledon
{
  public partial class TeledonService {
    public interface ISync {
      bool check(string userName, string password, int port);
      void donatieS(CazDTO caz, string numeDonator, string adresa, string nrTel, double sumaDonata);
      List<string> getDonators();
      List<CazDTO> getCauriDTO();
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_check(AsyncCallback callback, object state, string userName, string password, int port);
      bool End_check(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_donatieS(AsyncCallback callback, object state, CazDTO caz, string numeDonator, string adresa, string nrTel, double sumaDonata);
      void End_donatieS(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getDonators(AsyncCallback callback, object state);
      List<string> End_getDonators(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getCauriDTO(AsyncCallback callback, object state);
      List<CazDTO> End_getCauriDTO(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_check(AsyncCallback callback, object state, string userName, string password, int port)
      {
        return send_check(callback, state, userName, password, port);
      }

      public bool End_check(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_check();
      }

      #endif

      public bool check(string userName, string password, int port)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_check(null, null, userName, password, port);
        return End_check(asyncResult);

        #else
        send_check(userName, password, port);
        return recv_check();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_check(AsyncCallback callback, object state, string userName, string password, int port)
      {
        oprot_.WriteMessageBegin(new TMessage("check", TMessageType.Call, seqid_));
        check_args args = new check_args();
        args.UserName = userName;
        args.Password = password;
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_check(string userName, string password, int port)
      {
        oprot_.WriteMessageBegin(new TMessage("check", TMessageType.Call, seqid_));
        check_args args = new check_args();
        args.UserName = userName;
        args.Password = password;
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public bool recv_check()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        check_result result = new check_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "check failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_donatieS(AsyncCallback callback, object state, CazDTO caz, string numeDonator, string adresa, string nrTel, double sumaDonata)
      {
        return send_donatieS(callback, state, caz, numeDonator, adresa, nrTel, sumaDonata);
      }

      public void End_donatieS(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_donatieS();
      }

      #endif

      public void donatieS(CazDTO caz, string numeDonator, string adresa, string nrTel, double sumaDonata)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_donatieS(null, null, caz, numeDonator, adresa, nrTel, sumaDonata);
        End_donatieS(asyncResult);

        #else
        send_donatieS(caz, numeDonator, adresa, nrTel, sumaDonata);
        recv_donatieS();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_donatieS(AsyncCallback callback, object state, CazDTO caz, string numeDonator, string adresa, string nrTel, double sumaDonata)
      {
        oprot_.WriteMessageBegin(new TMessage("donatieS", TMessageType.Call, seqid_));
        donatieS_args args = new donatieS_args();
        args.Caz = caz;
        args.NumeDonator = numeDonator;
        args.Adresa = adresa;
        args.NrTel = nrTel;
        args.SumaDonata = sumaDonata;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_donatieS(CazDTO caz, string numeDonator, string adresa, string nrTel, double sumaDonata)
      {
        oprot_.WriteMessageBegin(new TMessage("donatieS", TMessageType.Call, seqid_));
        donatieS_args args = new donatieS_args();
        args.Caz = caz;
        args.NumeDonator = numeDonator;
        args.Adresa = adresa;
        args.NrTel = nrTel;
        args.SumaDonata = sumaDonata;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_donatieS()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        donatieS_result result = new donatieS_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_getDonators(AsyncCallback callback, object state)
      {
        return send_getDonators(callback, state);
      }

      public List<string> End_getDonators(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getDonators();
      }

      #endif

      public List<string> getDonators()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_getDonators(null, null);
        return End_getDonators(asyncResult);

        #else
        send_getDonators();
        return recv_getDonators();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getDonators(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("getDonators", TMessageType.Call, seqid_));
        getDonators_args args = new getDonators_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_getDonators()
      {
        oprot_.WriteMessageBegin(new TMessage("getDonators", TMessageType.Call, seqid_));
        getDonators_args args = new getDonators_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<string> recv_getDonators()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDonators_result result = new getDonators_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDonators failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_getCauriDTO(AsyncCallback callback, object state)
      {
        return send_getCauriDTO(callback, state);
      }

      public List<CazDTO> End_getCauriDTO(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getCauriDTO();
      }

      #endif

      public List<CazDTO> getCauriDTO()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_getCauriDTO(null, null);
        return End_getCauriDTO(asyncResult);

        #else
        send_getCauriDTO();
        return recv_getCauriDTO();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getCauriDTO(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("getCauriDTO", TMessageType.Call, seqid_));
        getCauriDTO_args args = new getCauriDTO_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_getCauriDTO()
      {
        oprot_.WriteMessageBegin(new TMessage("getCauriDTO", TMessageType.Call, seqid_));
        getCauriDTO_args args = new getCauriDTO_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<CazDTO> recv_getCauriDTO()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getCauriDTO_result result = new getCauriDTO_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCauriDTO failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["check"] = check_Process;
        processMap_["donatieS"] = donatieS_Process;
        processMap_["getDonators"] = getDonators_Process;
        processMap_["getCauriDTO"] = getCauriDTO_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void check_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        check_args args = new check_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        check_result result = new check_result();
        try
        {
          result.Success = iface_.check(args.UserName, args.Password, args.Port);
          oprot.WriteMessageBegin(new TMessage("check", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("check", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void donatieS_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        donatieS_args args = new donatieS_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        donatieS_result result = new donatieS_result();
        try
        {
          iface_.donatieS(args.Caz, args.NumeDonator, args.Adresa, args.NrTel, args.SumaDonata);
          oprot.WriteMessageBegin(new TMessage("donatieS", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("donatieS", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDonators_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDonators_args args = new getDonators_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDonators_result result = new getDonators_result();
        try
        {
          result.Success = iface_.getDonators();
          oprot.WriteMessageBegin(new TMessage("getDonators", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getDonators", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getCauriDTO_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getCauriDTO_args args = new getCauriDTO_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getCauriDTO_result result = new getCauriDTO_result();
        try
        {
          result.Success = iface_.getCauriDTO();
          oprot.WriteMessageBegin(new TMessage("getCauriDTO", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getCauriDTO", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class check_args : TBase
    {
      private string _userName;
      private string _password;
      private int _port;

      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int Port
      {
        get
        {
          return _port;
        }
        set
        {
          __isset.port = true;
          this._port = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userName;
        public bool password;
        public bool port;
      }

      public check_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Port = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("check_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserName != null && __isset.userName) {
            field.Name = "userName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserName);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (__isset.port) {
            field.Name = "port";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Port);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("check_args(");
        bool __first = true;
        if (UserName != null && __isset.userName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserName: ");
          __sb.Append(UserName);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (__isset.port) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Port: ");
          __sb.Append(Port);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class check_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public check_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("check_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("check_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class donatieS_args : TBase
    {
      private CazDTO _caz;
      private string _numeDonator;
      private string _adresa;
      private string _nrTel;
      private double _sumaDonata;

      public CazDTO Caz
      {
        get
        {
          return _caz;
        }
        set
        {
          __isset.caz = true;
          this._caz = value;
        }
      }

      public string NumeDonator
      {
        get
        {
          return _numeDonator;
        }
        set
        {
          __isset.numeDonator = true;
          this._numeDonator = value;
        }
      }

      public string Adresa
      {
        get
        {
          return _adresa;
        }
        set
        {
          __isset.adresa = true;
          this._adresa = value;
        }
      }

      public string NrTel
      {
        get
        {
          return _nrTel;
        }
        set
        {
          __isset.nrTel = true;
          this._nrTel = value;
        }
      }

      public double SumaDonata
      {
        get
        {
          return _sumaDonata;
        }
        set
        {
          __isset.sumaDonata = true;
          this._sumaDonata = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool caz;
        public bool numeDonator;
        public bool adresa;
        public bool nrTel;
        public bool sumaDonata;
      }

      public donatieS_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Caz = new CazDTO();
                  Caz.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  NumeDonator = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Adresa = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  NrTel = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Double) {
                  SumaDonata = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("donatieS_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Caz != null && __isset.caz) {
            field.Name = "caz";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Caz.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (NumeDonator != null && __isset.numeDonator) {
            field.Name = "numeDonator";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NumeDonator);
            oprot.WriteFieldEnd();
          }
          if (Adresa != null && __isset.adresa) {
            field.Name = "adresa";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Adresa);
            oprot.WriteFieldEnd();
          }
          if (NrTel != null && __isset.nrTel) {
            field.Name = "nrTel";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NrTel);
            oprot.WriteFieldEnd();
          }
          if (__isset.sumaDonata) {
            field.Name = "sumaDonata";
            field.Type = TType.Double;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(SumaDonata);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("donatieS_args(");
        bool __first = true;
        if (Caz != null && __isset.caz) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Caz: ");
          __sb.Append(Caz== null ? "<null>" : Caz.ToString());
        }
        if (NumeDonator != null && __isset.numeDonator) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumeDonator: ");
          __sb.Append(NumeDonator);
        }
        if (Adresa != null && __isset.adresa) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Adresa: ");
          __sb.Append(Adresa);
        }
        if (NrTel != null && __isset.nrTel) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NrTel: ");
          __sb.Append(NrTel);
        }
        if (__isset.sumaDonata) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SumaDonata: ");
          __sb.Append(SumaDonata);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class donatieS_result : TBase
    {

      public donatieS_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("donatieS_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("donatieS_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDonators_args : TBase
    {

      public getDonators_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getDonators_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getDonators_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDonators_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getDonators_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      string _elem2;
                      _elem2 = iprot.ReadString();
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getDonators_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter3 in Success)
                {
                  oprot.WriteString(_iter3);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getDonators_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCauriDTO_args : TBase
    {

      public getCauriDTO_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCauriDTO_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCauriDTO_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getCauriDTO_result : TBase
    {
      private List<CazDTO> _success;

      public List<CazDTO> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getCauriDTO_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<CazDTO>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      CazDTO _elem6;
                      _elem6 = new CazDTO();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getCauriDTO_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (CazDTO _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getCauriDTO_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
